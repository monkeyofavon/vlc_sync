#! /usr/bin/python

import sys
import dbus
import thread
import socket
from gi.repository import GObject
from dbus.mainloop.glib import DBusGMainLoop


class DbusIface():
    def __init__(self, bus, bus_name, object_path, iface_name):
        self.bus_name = bus_name
        self.object_path = object_path
        self.iface_name = iface_name

        self.bus = bus
        self.proxy = None
        self.iface = None

    def connect(self):
        self.proxy = self.bus.get_object(self.bus_name, self.object_path)
        self.iface = dbus.Interface(self.proxy, dbus_interface = self.iface_name)

    def listen(self, signal, signal_handler):
        self.iface.connect_to_signal(signal, signal_handler)


class Socket():
    def __init__(self, address, port):
        self.recipient = (address, port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('', port))
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    def send(self, message):
        self.socket.sendto(bytes(message), self.recipient)

    def receive(self):
        data, addr = self.socket.recvfrom(1024)
        return data
        
    def close(self):
        self.socket.close()


class SignalHandler():
    def __init__(self, bus, socket):
        self.bus = bus
        self.socket = socket

        self.application_iface = DbusIface(self.bus,'org.freedesktop.DBus','/org/freedesktop/DBus','org.freedesktop.DBus')
        self.properties_iface = None
        self.player_iface = None

        GObject.io_add_watch(self.socket.socket, GObject.IO_IN, self.__handle_network_data)

        self.application_iface.connect()
        self.application_iface.listen('NameOwnerChanged', self.__handle_name_owner_changed)

    def __handle_name_owner_changed(self, bus_name, disconnect_id, connect_id):
        if 'org.mpris.MediaPlayer2.vlc-' in bus_name:
            if not self.properties_iface and connect_id:
                self.properties_iface = DbusIface(self.bus, bus_name,'/org/mpris/MediaPlayer2','org.freedesktop.DBus.Properties')
                self.player_iface = DbusIface(self.bus, bus_name,'/org/mpris/MediaPlayer2','org.mpris.MediaPlayer2.Player')
                self.properties_iface.connect()
                self.player_iface.connect()
                self.properties_iface.listen('PropertiesChanged', self.__handle_properties_changed)
                print "connected\t'%s'" % bus_name
            elif self.properties_iface and disconnect_id and self.properties_iface.bus_name == bus_name:
                self.properties_iface = None
                print "disconnected\t'%s'" % bus_name

    def __handle_properties_changed(self, bus_name, message_dict, __ignore):
        playback_status = dbus.String(u'PlaybackStatus')
        if playback_status in message_dict.keys():
            message = message_dict[playback_status]
            self.socket.send(message)
            print "playback\t'%s'" % message

    def __handle_network_data(self, socket, wat):
        message = str(self.socket.receive())
        if message == 'Playing':
            self.play()
        elif message == 'Paused':
            self.pause()
        elif message == 'Stopped':
            self.stop()
        print "network\t\t'%s'" % message
        return True

    def __get_track_id(self):
        metadata = self.properties_iface.Get(self.player_iface_name, 'Metadata')
        return metadata[dbus.String(u'mpris:trackid')]
 
    def jump_to(self, position):
        try:
            track_id = self.__get_track_id()
            self.player_iface.SetPosition(track_id, position)
        except:
            return 0
        return 1
    
    def play(self):
        try:
            self.player_iface.Play()
        except:
            return 0
        return 1

    def pause(self):
        try:
            self.player_iface.Pause()
        except:
            return 0
        return 1

    def stop(self):
        try:
            self.player_iface.Stop()
        except:
            return 0
        return 1


def address_port(arg):
    arg_list = arg.split(':')
    return arg_list[0], int(arg_list[1])

def main():
    DBusGMainLoop(set_as_default=True)

    if len(sys.argv) == 2:
        address, port = address_port(sys.argv[1])
        socket = Socket(address, port)
        bus = dbus.SessionBus()
        signal_handler = SignalHandler(bus, socket)
    else:
        print "eh, try something else..."
        exit(0)

    mainloop = GObject.MainLoop()
    mainloop.run()

if __name__ == '__main__':
    main()
