#! /usr/bin/python

import sys
import dbus
import thread
import socket
from gi.repository import GObject
from dbus.mainloop.glib import DBusGMainLoop


class DbusListener():
    def __init__(self, bus, bus_name, object_path, iface_name):
        self.bus_name = bus_name
        self.object_path = object_path
        self.iface_name = iface_name

        self.bus = bus
        self.proxy = None
        self.iface = None

    def connect(self):
        self.proxy = self.bus.get_object(self.bus_name, self.object_path)
        self.iface = dbus.Interface(self.proxy, dbus_interface = self.iface_name)
        self.properties_iface = dbus.Interface(self.proxy, dbus_interface = self.iface_name)

    def listen(self, signal, signal_handler):
        self.iface.connect_to_signal(signal, signal_handler)


class Socket():
    def __init__(self, address, port):
        self.recipient = (address, port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('', port))
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    def send(self, message):
        self.socket.sendto(bytes(message), self.recipient)

    def receive(self):
        data, addr = self.socket.recvfrom(1)
        return data
        
    def close(self):
        self.socket.close()


class SignalHandler():
    def __init__(self, bus, socket):
        self.bus = bus
        self.socket = socket

        self.application_listener = DbusListener(self.bus,'org.freedesktop.DBus','/org/freedesktop/DBus','org.freedesktop.DBus')
        self.instance_listener = None

        self.application_listener.connect()
        self.application_listener.listen('NameOwnerChanged',self.__handle_name_owner_changed)

        thread.start_new_thread(self.__handle_network_data, ())

    def __handle_name_owner_changed(self, bus_name, disconnect_id, connect_id):
        if 'org.mpris.MediaPlayer2.vlc-' in bus_name:
            if not self.instance_listener and connect_id:
                self.instance_listener = DbusListener(self.bus, bus_name,'/org/mpris/MediaPlayer2','org.freedesktop.DBus.Properties')
                self.instance_listener.connect()
                self.instance_listener.listen('PropertiesChanged',self.__handle_properties_changed)
                print "connected\t'%s'" % bus_name
            elif self.instance_listener.bus_name == bus_name and disconnect_id:
                self.instance_listener = None
                print "disconnected\t'%s'" % bus_name

    def __handle_properties_changed(self, bus_name, message_dict, __ignore):
        playback_status = dbus.String(u'PlaybackStatus')
        if playback_status in message_dict.keys():
            message = message_dict[playback_status]
            sent = self.socket.send(message)
            print "playback\t'%s'" % message

    def __handle_network_data(self):
        while True:
            data = self.socket.receive()
            print "network\t\t'%s'" % str(data)


# class VlcInterface:
#     def __init__(self, bus_name):
#         pass
        
#     def __get_track_id(self):
#         metadata = self.properties_iface.Get(self.player_iface_name, 'Metadata')
#         return metadata[dbus.String(u'mpris:trackid')]
 
#     def jump_to(self, position):
#         try:
#             track_id = self.__get_track_id()
#             self.player_iface.SetPosition(track_id, position)
#         except:
#             return 0
#         return 1

#     def play(self):
#         try:
#             self.player_iface.Play()
#         except:
#             return 0
#         return 1

#     def pause(self):
#         try:
#             self.player_iface.Pause()
#         except:
#             return 0
#         return 1

#     def stop(self):
#         try:
#             self.player_iface.Stop()
#         except:
#             return 0
#         return 1


def address_port(arg):
    arg_list = arg.split(':')
    return arg_list[0], int(arg_list[1])


def main():
    DBusGMainLoop(set_as_default=True)

    if len(sys.argv) == 2:
        address, port = address_port(sys.argv[1])
        socket = Socket(address, port)
        bus = dbus.SessionBus()
        signal_handler = SignalHandler(bus, socket)
    else:
        print "eh, try something else..."
        exit(0)

    mainloop = GObject.MainLoop()
    mainloop.run()

if __name__ == '__main__':
    main()
