#! /usr/bin/python


import sys
import dbus
import getopt
import socket
from gi.repository import GObject
from dbus.mainloop.glib import DBusGMainLoop


class DbusIface():
    def __init__(self, bus, bus_name, object_path, iface_name):
        self.bus_name = bus_name
        self.object_path = object_path
        self.iface_name = iface_name

        self.bus = bus
        self.proxy = None
        self.iface = None

    def connect(self):
        self.proxy = self.bus.get_object(self.bus_name, self.object_path)
        self.iface = dbus.Interface(self.proxy, dbus_interface = self.iface_name)

    def listen(self, signal, signal_handler):
        self.iface.connect_to_signal(signal, signal_handler)


class Socket():
    def __init__(self, host_port, address, port):
        self.recipient = (address, port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('', host_port))
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    def send(self, message):
        self.socket.sendto(bytes(message), self.recipient)

    def receive(self):
        return self.socket.recvfrom(1024)
        
    def close(self):
        self.socket.close()


class SignalHandler():
    def __init__(self, bus, socket):
        self.bus = bus
        self.socket = socket

        self.application_iface = DbusIface(self.bus,'org.freedesktop.DBus','/org/freedesktop/DBus','org.freedesktop.DBus')
        self.properties_iface = None
        self.player_iface = None

        GObject.io_add_watch(self.socket.socket, GObject.IO_IN, self.__handle_network_data)

        self.application_iface.connect()
        self.application_iface.listen('NameOwnerChanged', self.__handle_name_owner_changed)

    def __handle_name_owner_changed(self, bus_name, disconnect_id, connect_id):
        if 'org.mpris.MediaPlayer2.vlc' in bus_name and len(bus_name) > 26:
            if not self.properties_iface and connect_id:
                self.properties_iface = DbusIface(self.bus, bus_name,'/org/mpris/MediaPlayer2','org.freedesktop.DBus.Properties')
                self.player_iface = DbusIface(self.bus, bus_name,'/org/mpris/MediaPlayer2','org.mpris.MediaPlayer2.Player')
                self.properties_iface.connect()
                self.player_iface.connect()
                self.properties_iface.listen('PropertiesChanged', self.__handle_properties_changed)
                self.player_iface.listen('Seeked', self.__handle_seeked)
                print "connected\t'%s'" % bus_name
            elif self.properties_iface and disconnect_id and self.properties_iface.bus_name == bus_name:
                self.properties_iface = None
                self.player_iface = None
                print "disconnected\t'%s'" % bus_name

    def __handle_properties_changed(self, bus_name, message_dict, __ignore):
        playback_status = dbus.String(u'PlaybackStatus')
        if playback_status in message_dict.keys():
            message = message_dict[playback_status]
            self.socket.send(message)
            print "playback\t'%s'" % message

    def __handle_seeked(self, position):
        message = "Seeked:" + str(position)
        self.socket.send(message)
        print "playback\t'%s'" % message

    def __handle_network_data(self, socket, wat):
        message, address = self.socket.receive()
        if self.socket.recipient == address:
            if message == 'Playing':
                self.play()
            elif message == 'Paused':
                self.pause()
            elif message == 'Stopped':
                self.stop()
            elif 'Seeked' in message:
                position = int(message.split(':')[1])
                self.jump_to(position)
            print "network\t\t'%s'" % message
        return True

    def __get_track_id(self):
        iface_name = self.player_iface.iface_name
        metadata = self.properties_iface.iface.Get(iface_name, 'Metadata')
        return metadata[dbus.String(u'mpris:trackid')]
 
    def __get_position(self):
        iface_name = self.player_iface.iface_name
        position = self.properties_iface.iface.Get(iface_name, 'Position')
        return int(position)

    def jump_to(self, position):
        try:
            offset = 1000000
            current_position = self.__get_position()
            if position < current_position - offset or position > current_position + offset:
                track_id = self.__get_track_id()
                self.player_iface.iface.SetPosition(track_id, position)
        except:
            return 0
        return 1
    
    def play(self):
        try:
            self.player_iface.iface.Play()
        except:
            return 0
        return 1

    def pause(self):
        try:
            self.player_iface.iface.Pause()
        except:
            return 0
        return 1

    def stop(self):
        try:
            self.player_iface.iface.Stop()
        except:
            return 0
        return 1


def print_help():
    print "usage: vlc_sync [OPTION] TARGET_ADDRESS"
    print "  -h PORT\tport to host this session on (defaults to 8989)"
    print "  -p PORT\tport to communicate with (defaults to 8989)"
    print "  --help\tprint this helpful message"

def main():
    DBusGMainLoop(set_as_default=True)

    port = 8989
    host_port = port
    address = None

    try:
        options, args = getopt.getopt(sys.argv[1:], 'h:p:', ["help"])
    except getopt.GetoptError as err:
        print err
        print_help()
        exit(1)
        
    for option, argument in options:
        if option == "--help":
            print_help()
            exit(1)
        elif option == "-h":
            try:
                host_port = int(argument)
            except ValueError:
                print "'%s' is not a valid port" % argument
                print_help()
                exit(1)
        elif option == "-p":
            try:
                port = int(argument)
            except ValueError:
                print "'%s' is not a valid port" % argument
                print_help()
                exit(1)
        else:
            print "invalid option '%s %s'" % option, argument
            print_help()
            exit(1)

    if len(args) == 1:
        address = args[0]
    elif len(args) == 0:
        print "you need to supply a target address"
        print_help()
        exit(1)
    else:
        print "invalid argument(s):",
        for argument in args:
            print argument,
        print ""
        print_help()
        exit(1)

    try:
        socket = Socket(host_port, address, port)
    except:
        print "can't open a socket with these arguments"
        exit(1)

    bus = dbus.SessionBus()
    signal_handler = SignalHandler(bus, socket)

    mainloop = GObject.MainLoop()
    mainloop.run()

if __name__ == '__main__':
    main()
